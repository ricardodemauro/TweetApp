{"version":3,"sources":["components/header.js","components/footer.js","components/loadingContainer.js","pages/HomePage.js","components/tweet.js","constants.js","pages/TweetPage.js","pages/AuthPage.js","pages/ProfilePage.js","pages/LogoutPage.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","exact","Footer","target","rel","href","LoadingContainer","HomePage","useOktaAuth","authState","authService","useState","userInfo","setUserInfo","loaded","setLoaded","useEffect","updateUserInfo","a","isAuthenticated","getUser","info","login","console","log","role","name","Button","onClick","Image","xmlns","viewBox","width","height","cx","cy","r","stroke","strokeWidth","fill","x","y","substring","toUpperCase","Name","props","Tweet","tweet","TweetBody","image","handle","Fragment","CreateTweet","onFormSubmit","setTweet","onSubmit","e","preventDefault","bind","type","value","onChange","aria-describedby","placeholder","action","alert","style","position","ISSUER","HOST","window","location","host","REDIRECT_URI_HTTP","REDIRECT_URI_HTTPS","azApi","config","issuer","clientId","redirectUri","indexOf","protocol","scope","split","api","TweetPage","tweets","setTweets","getTweets","fetch","method","headers","accessToken","res","json","data","mappedTweets","map","item","i","user","message","tweetForm","body","JSON","stringify","ok","warn","statusText","this","Array","isArray","index","key","AuthPage","isPending","ProfilePage","then","origin","Logout","withRouter","history","logout","push","idToken","App","path","component","LoginCallback","LogoutPage","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.6f126ae3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nfunction Header() {\r\n    return (\r\n        <header className=\"masthead mb-auto\">\r\n            <div className=\"inner\">\r\n                <h3 className=\"masthead-brand\">Cover</h3>\r\n                <nav className=\"nav nav-masthead justify-content-center\">\r\n                    <NavLink className=\"nav-link\" to=\"/\" exact>Home</NavLink>\r\n                    <NavLink className=\"nav-link\" to=\"/app\">Tweets</NavLink>\r\n                    {/* <NavLink className=\"nav-link\" to=\"/about\">About</NavLink> */}\r\n                    <NavLink className=\"nav-link\" to=\"/profile\">Profile</NavLink>\r\n                    <NavLink className=\"nav-link\" to=\"/logout\">LogOut</NavLink>\r\n                </nav>\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer className=\"mastfoot mt-auto\">\r\n            <div className=\"inner\">\r\n                <p>POC made over twitch streams on <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://rmauro.dev/twitch\">RMauro's Twitch</a>. Source code on <a href=\"https://github.com/ricardodemauro/TweetApp\">Github</a>.</p>\r\n            </div>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport { DisappearedLoading } from 'react-loadingg';\r\n\r\nconst LoadingContainer = () => <DisappearedLoading />;\r\n\r\nexport default LoadingContainer;","import React, { useState, useEffect } from 'react';\r\nimport { useOktaAuth } from '@okta/okta-react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport LoadingContainer from '../components/loadingContainer'\r\n\r\nconst HomePage = () => {\r\n    const { authState, authService } = useOktaAuth();\r\n    const [userInfo, setUserInfo] = useState(null);\r\n    const [loaded, setLoaded] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const updateUserInfo = async () => {\r\n            if (!authState.isAuthenticated) {\r\n                // When user isn't authenticated, forget any user info\r\n                setUserInfo(null);\r\n\r\n                setLoaded(true);\r\n            } else {\r\n                const info = await authService.getUser();\r\n                setUserInfo(info);\r\n\r\n                setLoaded(true);\r\n            }\r\n        }\r\n\r\n        (async () => await updateUserInfo())();\r\n    }, [authState, authService]);\r\n\r\n    const login = async () => {\r\n        if (authState.isAuthenticated)\r\n            console.log('you`re already logged in. Do nothing');\r\n        else {\r\n            await authService.login('/');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <main role=\"main\" className=\"inner cover\">\r\n            <div className=\"lead\">\r\n                {!loaded && <LoadingContainer />}\r\n\r\n                {loaded && userInfo &&\r\n                    <p>Welcome back, {userInfo.name}!</p>\r\n                }\r\n                {loaded && !userInfo &&\r\n                    <Button onClick={login} className=\"btn btn-lg btn-secondary\">Login with OKTA</Button>\r\n                }\r\n            </div>\r\n        </main >\r\n    )\r\n}\r\n\r\nexport default HomePage;","import React, { useState } from 'react';\r\nimport Konami from 'react-konami-code';\r\n\r\nconst Image = ({ name }) => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 50 50\" width=\"36\" height=\"36\">\r\n            <circle cx=\"25\" cy=\"25\" r=\"20\" stroke=\"black\" strokeWidth=\"1\" fill=\"#343a40\" />\r\n            <text x=\"13.5\" y=\"30\" className=\"textSvg\" fill=\"white\">{name ? name.substring(0, 2).toUpperCase() : '??'}</text>\r\n        </svg>\r\n    )\r\n}\r\n\r\nconst Name = (props) => {\r\n    return (<span >{`@${props.name}`}</span>)\r\n}\r\n\r\nconst Tweet = (props) => {\r\n    return (\r\n        <span className=\"text-dark\">{props.tweet}</span>\r\n    )\r\n}\r\n\r\nconst TweetBody = ({ image, name, handle, tweet }) => {\r\n    return (\r\n        <React.Fragment>\r\n            <Image name={name} image={image} />\r\n            <div className=\"media-body px-2 text-justify\">\r\n                <h6 className=\"mt-0 d-block text-dark\"><Name name={name} /></h6>\r\n                <Tweet tweet={tweet} />\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst CreateTweet = ({ onFormSubmit }) => {\r\n    const [tweet, setTweet] = useState('');\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        if (onFormSubmit)\r\n            onFormSubmit({ tweet });\r\n\r\n        setTweet('');\r\n    }\r\n\r\n    function easterEgg() {\r\n        alert('Well done! Konami code activated');\r\n    }\r\n\r\n    return (\r\n        <div className=\"text-white-50 rounded shadow-sm my-3 bg-purple\">\r\n            <div className=\"row p-3\">\r\n                <form className=\"w-100 col-12\" onSubmit={handleSubmit.bind(this)}>\r\n                    <p className=\"h4 mb-4\">Submit your tweet</p>\r\n                    <div className=\"form-group\">\r\n                        <input type=\"text\" className=\"form-control\" value={tweet} onChange={(e) => setTweet(e.target.value)} aria-describedby=\"tweet\" placeholder=\"your tweet\" />\r\n                    </div>\r\n                    <Konami className=\"blink\" action={easterEgg.bind(this)}>\r\n                        {\"Hey, I'm an Easter Egg! Look at me!\"}\r\n                    </Konami>\r\n                    <div className=\"row lh-100\">\r\n                        <div className=\"col-12\">\r\n                            <button type=\"submit\" className=\"btn btn-primary\" style={{ position: \"absolute\", \"right\": \"15px\" }}>Submit</button>\r\n                            <h6 className=\"mb-0 text-white lh-100\">Bootstrap - with Konami Code</h6>\r\n                            <small>Since 2011</small>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport { TweetBody, CreateTweet }","export const CALLBACK_PATH = '/implicit/callback';\r\nexport const OKTA_DOMAIN_ISSUER = 'dev-669728.okta.com';\r\nexport const OKTA_DOMAIN = 'okta.rmaurolabs.dev';\r\nexport const CLIENT_ID = '0oa4gpq1oyOsCygrt357';\r\n\r\nexport const ISSUER = `https://${OKTA_DOMAIN}/oauth2/default`;\r\nexport const HOST = window.location.host;\r\nexport const SCOPES = 'openid profile email';\r\n\r\nconst REDIRECT_URI_HTTP = `http://${HOST}${CALLBACK_PATH}`;\r\nconst REDIRECT_URI_HTTPS = `https://${HOST}${CALLBACK_PATH}`;\r\n\r\nconst localApi = 'http://localhost:7071/api/Tweet/';\r\nconst azApi = 'https://tweetappapi0033.azurewebsites.net/api/tweet/';\r\n\r\nconst redirectUri = () => {\r\n  if(window.location.href.indexOf('github.io') > -1) {\r\n    return `https://ricardodemauro.github.io/TweetApp${CALLBACK_PATH}`;\r\n  }\r\n  else if(window.location.protocol.indexOf('https') > -1) {\r\n    return REDIRECT_URI_HTTPS;\r\n  }\r\n  else {\r\n    return REDIRECT_URI_HTTP;\r\n  }\r\n}\r\n\r\nexport const apiUri = () => {\r\n  if (window.location.href.indexOf('localhost') > -1) {\r\n    return azApi//localApi;\r\n  }\r\n  return azApi;\r\n}\r\n\r\nconst config = {\r\n  issuer: ISSUER,\r\n  clientId: CLIENT_ID,\r\n  redirectUri: redirectUri(),\r\n  scope: SCOPES.split(/\\s+/),\r\n};\r\n\r\n//console.log(config)\r\n\r\nexport default config;","import React, { useState, useEffect } from 'react';\r\nimport { useOktaAuth } from '@okta/okta-react';\r\nimport { TweetBody, CreateTweet } from '../components/tweet';\r\nimport LoadingContainer from '../components/loadingContainer'\r\nimport { apiUri } from '../constants';\r\n\r\nconst api = () => apiUri();\r\n\r\nfunction TweetPage() {\r\n  const { authState, authService } = useOktaAuth();\r\n  const [tweets = [], setTweets] = useState(0);\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    (async () => await getTweets())();\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [authState, authService]);\r\n\r\n  async function getTweets() {\r\n    setLoaded(false);\r\n\r\n    let res = await fetch(api(), {\r\n      method: 'get',\r\n      headers: {\r\n        'Authorization': `Bearer ${authState.accessToken}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    const data = await res.json();\r\n\r\n    var mappedTweets = data.map((item, i) => {\r\n      return { name: item.user, tweet: item.message }\r\n    });\r\n    setTweets(mappedTweets);\r\n\r\n    setLoaded(true);\r\n  }\r\n\r\n  async function submitTweet(tweetForm) {\r\n    let res = await fetch(api(), {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ message: tweetForm.tweet }),\r\n      headers: { \"Content-Type\": \"application/json\", 'Authorization': `Bearer ${authState.accessToken}` }\r\n    });\r\n\r\n    if (res.ok) {\r\n      await res.json();\r\n      await getTweets();\r\n    }\r\n    console.warn('something bad happened', res.statusText);\r\n  }\r\n\r\n  return (\r\n    <main role=\"main\" className=\"h-auto\">\r\n      <div className=\"App\">\r\n        <div className=\"container my-3 p-3 bg-dark rounded shadow-sm\">\r\n          <h1>Mini Tweet</h1>\r\n          <div className=\"row\">\r\n            <div className=\"col-12\">\r\n              <CreateTweet onFormSubmit={submitTweet.bind(this)} />\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-12\">\r\n              <h6 className=\"border-bottom border-gray pb-2 mb-0\">Recent updates</h6>\r\n\r\n              {!loaded &&\r\n                <div className=\"col-12 mt-4\">\r\n                  <LoadingContainer />\r\n                </div>}\r\n              {loaded && <ul className=\"list-unstyled\">\r\n                {Array.isArray(tweets) && [...tweets].map((item, index) => {\r\n                  return <li className=\"media shadow p-1 mb-2 bg-white rounded\" key={index}><TweetBody {...item} /></li>\r\n                })}\r\n              </ul>}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default TweetPage;\r\n","import React from \"react\";\r\nimport { useOktaAuth } from '@okta/okta-react';\r\n\r\nconst AuthPage = () => {\r\n    const { authState, authService } = useOktaAuth();\r\n    const login = () => authService.login('/profile');\r\n\r\n    if (authState.isPending) {\r\n        return (\r\n            <div>Loading authentication...</div>\r\n        );\r\n    } else if (!authState.isAuthenticated) {\r\n        return (\r\n            <div>\r\n                <button className=\"btn btn-primary\" onClick={login}>Login</button>\r\n            </div>\r\n        );\r\n    }\r\n    return (<h1 className=\"bg-white\">Something</h1>)\r\n}\r\n\r\nexport default AuthPage;","import { useOktaAuth } from '@okta/okta-react';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst ProfilePage = () => {\r\n    const { authState, authService } = useOktaAuth();\r\n    const [userInfo, setUserInfo] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (!authState.isAuthenticated) {\r\n            // When user isn't authenticated, forget any user info\r\n            setUserInfo(null);\r\n        } else {\r\n            authService.getUser().then((info) => {\r\n                setUserInfo(info);\r\n            });\r\n        }\r\n    }, [authState, authService]); // Update if authState changes\r\n\r\n    return (\r\n        <main role=\"main\" className=\"h-100\">\r\n            <div>\r\n                {userInfo &&\r\n                    <div>\r\n                        <p>Welcome back, {userInfo.name}!</p>\r\n                        <p style={{ \"wordBreak\": \"break-all\" }}>Access Token, {authState.accessToken}</p>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default ProfilePage;","import React, { useEffect } from 'react';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { useOktaAuth } from '@okta/okta-react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport { ISSUER } from '../constants';\r\n\r\nconst redirectUri = `${window.location.origin}/logout`;\r\n\r\n// Basic component with logout button\r\nconst Logout = withRouter(({ history }) => {\r\n    const { authState, authService } = useOktaAuth();\r\n\r\n    useEffect(() => {\r\n        if (authState.isAuthenticated) {\r\n            (async () => await logout())();\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [authState, authService]);\r\n\r\n    if (!authState.isAuthenticated) {\r\n        history.push(\"/\");\r\n    }\r\n\r\n    const logout = async () => {\r\n        // Read idToken before local session is cleared\r\n        const idToken = authState.idToken;\r\n        await authService.logout('/');\r\n\r\n        // Clear remote session\r\n        window.location.href = `${ISSUER}/v1/logout?id_token_hint=${idToken}&post_logout_redirect_uri=${redirectUri}`;\r\n    };\r\n\r\n    return (\r\n        <main role=\"main\" className=\"inner cover\">\r\n            <div className=\"lead\">\r\n                <Button onClick={logout} className=\"btn btn-lg btn-secondary\">Logout</Button>\r\n            </div>\r\n        </main>\r\n    );\r\n});\r\n\r\nexport default Logout;","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport { Security, SecureRoute, LoginCallback } from '@okta/okta-react';\r\n\r\nimport Header from './components/header';\r\nimport Footer from './components/footer';\r\n\r\nimport HomePage from \"./pages/HomePage\";\r\nimport TweetPage from \"./pages/TweetPage\";\r\nimport AuthPage from \"./pages/AuthPage\";\r\nimport ProfilePage from \"./pages/ProfilePage\";\r\nimport LogoutPage from \"./pages/LogoutPage\";\r\n\r\nimport config, { CALLBACK_PATH } from './constants';\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"text-center\" style={{height: \"100%\"}}>\r\n      <div className=\"container d-flex h-100 p-3 mx-auto flex-column\">\r\n        <Router>\r\n          <Header />\r\n\r\n          <Security {...config}>\r\n            <Route path='/' exact={true} component={HomePage} />\r\n\r\n            <SecureRoute path='/app' component={TweetPage} />\r\n            <SecureRoute path='/auth' component={AuthPage} />\r\n            <SecureRoute path='/profile' component={ProfilePage} />\r\n            <Route path={CALLBACK_PATH} component={LoginCallback} />\r\n            <Route path='/logout' component={LogoutPage} />\r\n          </Security>\r\n\r\n          <Footer />\r\n        </Router >\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n//serviceWorker.register();\r\n"],"sourceRoot":""}